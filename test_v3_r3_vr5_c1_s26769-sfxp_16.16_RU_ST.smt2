(set-info :smt-lib-version 2.6)
(set-logic QF_FXP)
(set-info :category "crafted")
(set-info :source |Alberto Griggio <griggio@fbk.eu>. These benchmarks were used for the evaluation in the following paper: L. Haller, A. Griggio, M. Brain, D. Kroening: Deciding floating-point logic with systematic abstraction. FMCAD 2012. Real-numbered literals have been automatically translated by MathSAT|)
(set-info :status unknown)
;; MathSAT API call trace ;; generated on 05/20/15 17:24:54 
(declare-fun x0 () (_ SFXP 32 16))
(declare-fun x1 () (_ SFXP 32 16))
(declare-fun x2 () (_ SFXP 32 16))
(define-fun _t_10 () (_ SFXP 32 16) (sfxp #x00050000 16))
(define-fun _t_12 () (_ SFXP 32 16) (sfxp #x00050000 16))
(define-fun _t_13 () (_ SFXP 32 16) x0)
(define-fun _t_14 () Bool (sfxp.leq _t_12 _t_13))
(define-fun _t_15 () Bool (sfxp.leq _t_13 _t_10))
(define-fun _t_16 () Bool (and _t_14 _t_15))
(assert _t_16)
(define-fun _t_17 () (_ SFXP 32 16) x1)
(define-fun _t_18 () Bool (sfxp.leq _t_12 _t_17))
(define-fun _t_19 () Bool (sfxp.leq _t_17 _t_10))
(define-fun _t_20 () Bool (and _t_18 _t_19))
(assert _t_20)
(define-fun _t_21 () (_ SFXP 32 16) x2)
(define-fun _t_22 () Bool (sfxp.leq _t_12 _t_21))
(define-fun _t_23 () Bool (sfxp.leq _t_21 _t_10))
(define-fun _t_24 () Bool (and _t_22 _t_23))
(assert _t_24)
(define-fun _t_3 () RoundingMode RNE)
(define-fun _t_26 () (_ SFXP 32 16) (sfxp #x00000000 16))
(define-fun _t_29 () (_ SFXP 32 16) (sfxp #x0000ce97 16))
(define-fun _t_32 () (_ SFXP 32 16) (sfxp #x0000c5a1 16))
(define-fun _t_33 () (_ SFXP 32 16) (sfxp.mul Saturated roundTowardPositive _t_13 _t_32))
(define-fun _t_34 () (_ SFXP 32 16) (sfxp.add Saturated _t_26 _t_33))
(define-fun _t_37 () (_ SFXP 32 16) (sfxp #x0000abc6 16))
(define-fun _t_38 () (_ SFXP 32 16) (sfxp.mul Saturated roundTowardPositive _t_17 _t_37))
(define-fun _t_39 () (_ SFXP 32 16) (sfxp.add Saturated _t_34 _t_38))
(define-fun _t_42 () (_ SFXP 32 16) (sfxp #x00008666 16))
(define-fun _t_43 () (_ SFXP 32 16) (sfxp.mul Saturated roundTowardPositive _t_21 _t_42))
(define-fun _t_44 () (_ SFXP 32 16) (sfxp.add Saturated _t_39 _t_43))
(define-fun _t_45 () Bool (sfxp.leq _t_44 _t_29))
(assert _t_45)
(define-fun _t_48 () (_ SFXP 32 16) (sfxp #x0000b9db 16))
(define-fun _t_51 () (_ SFXP 32 16) (sfxp #x000013f7 16))
(define-fun _t_52 () (_ SFXP 32 16) (sfxp.mul Saturated roundTowardPositive _t_13 _t_51))
(define-fun _t_53 () (_ SFXP 32 16) (sfxp.add Saturated _t_26 _t_52))
(define-fun _t_55 () (_ SFXP 32 16) (sfxp #x00006b43 16))
(define-fun _t_56 () (_ SFXP 32 16) (sfxp.mul Saturated roundTowardPositive _t_17 _t_55))
(define-fun _t_57 () (_ SFXP 32 16) (sfxp.add Saturated _t_53 _t_56))
(define-fun _t_60 () (_ SFXP 32 16) (sfxp #x00009020 16))
(define-fun _t_61 () (_ SFXP 32 16) (sfxp.mul Saturated roundTowardPositive _t_21 _t_60))
(define-fun _t_62 () (_ SFXP 32 16) (sfxp.add Saturated _t_57 _t_61))
(define-fun _t_63 () Bool (sfxp.leq _t_62 _t_48))
(assert _t_63)
(define-fun _t_65 () (_ SFXP 32 16) (sfxp #x00005c28 16))
(define-fun _t_67 () (_ SFXP 32 16) (sfxp #x00005916 16))
(define-fun _t_68 () (_ SFXP 32 16) (sfxp.mul Saturated roundTowardPositive _t_13 _t_67))
(define-fun _t_69 () (_ SFXP 32 16) (sfxp.add Saturated _t_26 _t_68))
(define-fun _t_72 () (_ SFXP 32 16) (sfxp #x00007ba5 16))
(define-fun _t_73 () (_ SFXP 32 16) (sfxp.mul Saturated roundTowardPositive _t_17 _t_72))
(define-fun _t_74 () (_ SFXP 32 16) (sfxp.add Saturated _t_69 _t_73))
(define-fun _t_77 () (_ SFXP 32 16) (sfxp #x00000978 16))
(define-fun _t_78 () (_ SFXP 32 16) (sfxp.mul Saturated roundTowardPositive _t_21 _t_77))
(define-fun _t_79 () (_ SFXP 32 16) (sfxp.add Saturated _t_74 _t_78))
(define-fun _t_80 () Bool (sfxp.leq _t_79 _t_65))
(assert _t_80)
(check-sat)
(exit)
