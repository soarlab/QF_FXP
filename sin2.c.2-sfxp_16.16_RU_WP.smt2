(set-info :smt-lib-version 2.6)
(set-logic QF_BV)
(set-info :category "crafted")
(set-info :source |Alberto Griggio <griggio@fbk.eu>. These benchmarks were used for the evaluation in the following paper: L. Haller, A. Griggio, M. Brain, D. Kroening: Deciding floating-point logic with systematic abstraction. FMCAD 2012. Real-numbered literals have been automatically translated by MathSAT|)
(set-info :status sat)
;; MathSAT API call trace ;; generated on 05/20/15 17:24:53 
(declare-fun b181 () (_ SFXP 32 16))
(declare-fun b45 () (_ SFXP 32 16))
(declare-fun b36 () (_ SFXP 32 16))
(declare-fun b188 () (_ SFXP 32 16))
(declare-fun b129 () (_ SFXP 32 16))
(declare-fun b55 () (_ SFXP 32 16))
(declare-fun b77 () (_ SFXP 32 16))
(declare-fun b202 () (_ SFXP 32 16))
(declare-fun b68 () (_ SFXP 32 16))
(declare-fun b186 () (_ SFXP 32 16))
(declare-fun b126 () (_ SFXP 32 16))
(declare-fun b38 () (_ SFXP 32 16))
(declare-fun b197 () (_ SFXP 32 16))
(define-fun _t_3 () RoundingMode roundTowardPositive)
(define-fun _t_9 () (_ SFXP 32 16) b36)
(define-fun _t_10 () (_ SFXP 32 16) (sfxp.mul Wrapping _t_3 _t_9 _t_9))
(define-fun _t_11 () (_ SFXP 32 16) (sfxp.neg Wrapping _t_10))
(define-fun _t_12 () (_ SFXP 32 16) (sfxp.mul Wrapping _t_3 _t_9 _t_11))
(define-fun _t_13 () (_ SFXP 32 16) _t_12)
(define-fun _t_14 () (_ SFXP 32 16) b55)
(define-fun _t_15 () (_ SFXP 32 16) (sfxp.div Wrapping _t_3 _t_13 _t_14))
(define-fun _t_16 () (_ SFXP 32 16) _t_15)
(define-fun _t_17 () (_ SFXP 32 16) b202)
(define-fun _t_18 () Bool (= _t_16 _t_17))
(define-fun _t_19 () Bool (not _t_18))
(define-fun _t_20 () (_ SFXP 32 16) (sfxp.mul Wrapping _t_3 _t_11 _t_16))
(define-fun _t_21 () (_ SFXP 32 16) _t_20)
(define-fun _t_22 () (_ SFXP 32 16) b77)
(define-fun _t_23 () (_ SFXP 32 16) (sfxp.div Wrapping _t_3 _t_21 _t_22))
(define-fun _t_24 () (_ SFXP 32 16) _t_23)
(define-fun _t_25 () (_ SFXP 32 16) b197)
(define-fun _t_26 () Bool (= _t_24 _t_25))
(define-fun _t_27 () Bool (not _t_26))
(define-fun _t_28 () (_ SFXP 32 16) (sfxp.add Wrapping _t_9 _t_16))
(define-fun _t_29 () (_ SFXP 32 16) (sfxp.add Wrapping _t_24 _t_28))
(define-fun _t_30 () (_ SFXP 32 16) b186)
(define-fun _t_31 () Bool (= _t_29 _t_30))
(define-fun _t_32 () Bool (not _t_31))
(define-fun _t_33 () (_ SFXP 32 16) b188)
(define-fun _t_34 () Bool (= _t_30 _t_33))
(define-fun _t_35 () Bool (not _t_34))
(define-fun _t_36 () (_ SFXP 32 16) b181)
(define-fun _t_37 () Bool (= _t_9 _t_36))
(define-fun _t_38 () Bool (not _t_37))
(define-fun _t_39 () (_ SFXP 32 16) b38)
(define-fun _t_40 () Bool (sfxp.leq _t_39 _t_9))
(define-fun _t_41 () Bool (not _t_40))
(define-fun _t_42 () (_ SFXP 32 16) (sfxp.neg Wrapping _t_9))
(define-fun _t_43 () Bool (= _t_36 _t_42))
(define-fun _t_44 () Bool (and _t_41 _t_43))
(define-fun _t_45 () Bool (and _t_38 _t_44))
(define-fun _t_46 () Bool (sfxp.leq _t_39 _t_30))
(define-fun _t_47 () Bool (not _t_46))
(define-fun _t_48 () Bool (and _t_45 _t_47))
(define-fun _t_49 () (_ SFXP 32 16) (sfxp.neg Wrapping _t_30))
(define-fun _t_50 () Bool (= _t_33 _t_49))
(define-fun _t_51 () Bool (and _t_48 _t_50))
(define-fun _t_52 () Bool (and _t_35 _t_51))
(define-fun _t_53 () (_ SFXP 32 16) _t_17)
(define-fun _t_54 () (_ SFXP 32 16) b68)
(define-fun _t_55 () Bool (sfxp.leq _t_54 _t_53))
(define-fun _t_56 () Bool (not _t_55))
(define-fun _t_57 () Bool (and _t_52 _t_56))
(define-fun _t_58 () Bool (= _t_28 _t_30))
(define-fun _t_59 () Bool (and _t_57 _t_58))
(define-fun _t_60 () (_ SFXP 32 16) b45)
(define-fun _t_61 () Bool (sfxp.leq _t_33 _t_60))
(define-fun _t_62 () Bool (not _t_61))
(define-fun _t_63 () Bool (and _t_59 _t_62))
(define-fun _t_64 () (_ SFXP 32 16) b129)
(define-fun _t_65 () Bool (sfxp.leq _t_36 _t_64))
(define-fun _t_66 () Bool (and _t_63 _t_65))
(define-fun _t_67 () (_ SFXP 32 16) b126)
(define-fun _t_68 () Bool (sfxp.leq _t_67 _t_9))
(define-fun _t_69 () Bool (and _t_66 _t_68))
(define-fun _t_70 () Bool (sfxp.leq _t_9 _t_64))
(define-fun _t_71 () Bool (and _t_69 _t_70))
(define-fun _t_72 () Bool (and _t_32 _t_71))
(define-fun _t_73 () Bool (sfxp.leq _t_39 _t_24))
(define-fun _t_74 () Bool (not _t_73))
(define-fun _t_75 () Bool (and _t_72 _t_74))
(define-fun _t_76 () (_ SFXP 32 16) (sfxp.neg Wrapping _t_24))
(define-fun _t_77 () Bool (= _t_25 _t_76))
(define-fun _t_78 () Bool (and _t_75 _t_77))
(define-fun _t_79 () Bool (and _t_27 _t_78))
(define-fun _t_80 () Bool (sfxp.leq _t_39 _t_16))
(define-fun _t_81 () Bool (not _t_80))
(define-fun _t_82 () Bool (and _t_79 _t_81))
(define-fun _t_83 () (_ SFXP 32 16) (sfxp.neg Wrapping _t_16))
(define-fun _t_84 () Bool (= _t_17 _t_83))
(define-fun _t_85 () Bool (and _t_82 _t_84))
(define-fun _t_86 () (_ SFXP 32 16) _t_25)
(define-fun _t_87 () Bool (sfxp.leq _t_54 _t_86))
(define-fun _t_88 () Bool (not _t_87))
(define-fun _t_89 () Bool (and _t_85 _t_88))
(define-fun _t_90 () Bool (and _t_19 _t_89))
(assert _t_90)
(check-sat)
(exit)
