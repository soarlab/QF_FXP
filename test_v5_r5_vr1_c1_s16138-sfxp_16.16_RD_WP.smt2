(set-info :smt-lib-version 2.6)
(set-logic QF_BV)
(set-info :category "crafted")
(set-info :source |Alberto Griggio <griggio@fbk.eu>. These benchmarks were used for the evaluation in the following paper: L. Haller, A. Griggio, M. Brain, D. Kroening: Deciding floating-point logic with systematic abstraction. FMCAD 2012. Real-numbered literals have been automatically translated by MathSAT|)
(set-info :status sat)
;; MathSAT API call trace ;; generated on 05/20/15 17:24:56 
(declare-fun x0 () (_ SFXP 32 16))
(declare-fun x1 () (_ SFXP 32 16))
(declare-fun x2 () (_ SFXP 32 16))
(declare-fun x3 () (_ SFXP 32 16))
(declare-fun x4 () (_ SFXP 32 16))
(define-fun _t_10 () (_ SFXP 32 16) (sfxp #x00010000 16))
(define-fun _t_12 () (_ SFXP 32 16) (sfxp #x00010000 16))
(define-fun _t_13 () (_ SFXP 32 16) x0)
(define-fun _t_14 () Bool (sfxp.leq _t_12 _t_13))
(define-fun _t_15 () Bool (sfxp.leq _t_13 _t_10))
(define-fun _t_16 () Bool (and _t_14 _t_15))
(assert _t_16)
(define-fun _t_17 () (_ SFXP 32 16) x1)
(define-fun _t_18 () Bool (sfxp.leq _t_12 _t_17))
(define-fun _t_19 () Bool (sfxp.leq _t_17 _t_10))
(define-fun _t_20 () Bool (and _t_18 _t_19))
(assert _t_20)
(define-fun _t_21 () (_ SFXP 32 16) x2)
(define-fun _t_22 () Bool (sfxp.leq _t_12 _t_21))
(define-fun _t_23 () Bool (sfxp.leq _t_21 _t_10))
(define-fun _t_24 () Bool (and _t_22 _t_23))
(assert _t_24)
(define-fun _t_25 () (_ SFXP 32 16) x3)
(define-fun _t_26 () Bool (sfxp.leq _t_12 _t_25))
(define-fun _t_27 () Bool (sfxp.leq _t_25 _t_10))
(define-fun _t_28 () Bool (and _t_26 _t_27))
(assert _t_28)
(define-fun _t_29 () (_ SFXP 32 16) x4)
(define-fun _t_30 () Bool (sfxp.leq _t_12 _t_29))
(define-fun _t_31 () Bool (sfxp.leq _t_29 _t_10))
(define-fun _t_32 () Bool (and _t_30 _t_31))
(assert _t_32)
(define-fun _t_3 () RoundingMode roundTowardNegative)
(define-fun _t_34 () (_ SFXP 32 16) (sfxp #x00000000 16))
(define-fun _t_36 () (_ SFXP 32 16) (sfxp #x0000d2f1 16))
(define-fun _t_39 () (_ SFXP 32 16) (sfxp #x000057ce 16))
(define-fun _t_40 () (_ SFXP 32 16) (sfxp.mul Wrapping _t_3 _t_13 _t_39))
(define-fun _t_41 () (_ SFXP 32 16) (sfxp.add Wrapping _t_34 _t_40))
(define-fun _t_43 () (_ SFXP 32 16) (sfxp #x0000d4bc 16))
(define-fun _t_44 () (_ SFXP 32 16) (sfxp.mul Wrapping _t_3 _t_17 _t_43))
(define-fun _t_45 () (_ SFXP 32 16) (sfxp.add Wrapping _t_41 _t_44))
(define-fun _t_47 () (_ SFXP 32 16) (sfxp #x0000c6a7 16))
(define-fun _t_48 () (_ SFXP 32 16) (sfxp.mul Wrapping _t_3 _t_21 _t_47))
(define-fun _t_49 () (_ SFXP 32 16) (sfxp.add Wrapping _t_45 _t_48))
(define-fun _t_51 () (_ SFXP 32 16) (sfxp #x00005a9f 16))
(define-fun _t_52 () (_ SFXP 32 16) (sfxp.mul Wrapping _t_3 _t_25 _t_51))
(define-fun _t_53 () (_ SFXP 32 16) (sfxp.add Wrapping _t_49 _t_52))
(define-fun _t_55 () (_ SFXP 32 16) (sfxp #x00009374 16))
(define-fun _t_56 () (_ SFXP 32 16) (sfxp.mul Wrapping _t_3 _t_29 _t_55))
(define-fun _t_57 () (_ SFXP 32 16) (sfxp.add Wrapping _t_53 _t_56))
(define-fun _t_58 () Bool (sfxp.leq _t_57 _t_36))
(assert _t_58)
(define-fun _t_60 () (_ SFXP 32 16) (sfxp #x00001a5e 16))
(define-fun _t_63 () (_ SFXP 32 16) (sfxp #x0000d810 16))
(define-fun _t_64 () (_ SFXP 32 16) (sfxp.mul Wrapping _t_3 _t_13 _t_63))
(define-fun _t_65 () (_ SFXP 32 16) (sfxp.add Wrapping _t_34 _t_64))
(define-fun _t_67 () (_ SFXP 32 16) (sfxp #x00000b43 16))
(define-fun _t_68 () (_ SFXP 32 16) (sfxp.mul Wrapping _t_3 _t_17 _t_67))
(define-fun _t_69 () (_ SFXP 32 16) (sfxp.add Wrapping _t_65 _t_68))
(define-fun _t_72 () (_ SFXP 32 16) (sfxp #x0000849b 16))
(define-fun _t_73 () (_ SFXP 32 16) (sfxp.mul Wrapping _t_3 _t_21 _t_72))
(define-fun _t_74 () (_ SFXP 32 16) (sfxp.add Wrapping _t_69 _t_73))
(define-fun _t_77 () (_ SFXP 32 16) (sfxp #x0000d2b0 16))
(define-fun _t_78 () (_ SFXP 32 16) (sfxp.mul Wrapping _t_3 _t_25 _t_77))
(define-fun _t_79 () (_ SFXP 32 16) (sfxp.add Wrapping _t_74 _t_78))
(define-fun _t_82 () (_ SFXP 32 16) (sfxp #x00002ed9 16))
(define-fun _t_83 () (_ SFXP 32 16) (sfxp.mul Wrapping _t_3 _t_29 _t_82))
(define-fun _t_84 () (_ SFXP 32 16) (sfxp.add Wrapping _t_79 _t_83))
(define-fun _t_85 () Bool (sfxp.leq _t_60 _t_84))
(assert _t_85)
(define-fun _t_87 () (_ SFXP 32 16) (sfxp #x0000828f 16))
(define-fun _t_89 () (_ SFXP 32 16) (sfxp #x00008d4f 16))
(define-fun _t_90 () (_ SFXP 32 16) (sfxp.mul Wrapping _t_3 _t_13 _t_89))
(define-fun _t_91 () (_ SFXP 32 16) (sfxp.add Wrapping _t_34 _t_90))
(define-fun _t_93 () (_ SFXP 32 16) (sfxp #x000051eb 16))
(define-fun _t_94 () (_ SFXP 32 16) (sfxp.mul Wrapping _t_3 _t_17 _t_93))
(define-fun _t_95 () (_ SFXP 32 16) (sfxp.add Wrapping _t_91 _t_94))
(define-fun _t_97 () (_ SFXP 32 16) (sfxp #x00001062 16))
(define-fun _t_98 () (_ SFXP 32 16) (sfxp.mul Wrapping _t_3 _t_21 _t_97))
(define-fun _t_99 () (_ SFXP 32 16) (sfxp.add Wrapping _t_95 _t_98))
(define-fun _t_102 () (_ SFXP 32 16) (sfxp #x000005a1 16))
(define-fun _t_103 () (_ SFXP 32 16) (sfxp.mul Wrapping _t_3 _t_25 _t_102))
(define-fun _t_104 () (_ SFXP 32 16) (sfxp.add Wrapping _t_99 _t_103))
(define-fun _t_106 () (_ SFXP 32 16) (sfxp #x00001c28 16))
(define-fun _t_107 () (_ SFXP 32 16) (sfxp.mul Wrapping _t_3 _t_29 _t_106))
(define-fun _t_108 () (_ SFXP 32 16) (sfxp.add Wrapping _t_104 _t_107))
(define-fun _t_109 () Bool (sfxp.leq _t_87 _t_108))
(assert _t_109)
(define-fun _t_111 () (_ SFXP 32 16) (sfxp #x00003020 16))
(define-fun _t_114 () (_ SFXP 32 16) (sfxp #x00002d91 16))
(define-fun _t_115 () (_ SFXP 32 16) (sfxp.mul Wrapping _t_3 _t_13 _t_114))
(define-fun _t_116 () (_ SFXP 32 16) (sfxp.add Wrapping _t_34 _t_115))
(define-fun _t_119 () (_ SFXP 32 16) (sfxp #x0000fe35 16))
(define-fun _t_120 () (_ SFXP 32 16) (sfxp.mul Wrapping _t_3 _t_17 _t_119))
(define-fun _t_121 () (_ SFXP 32 16) (sfxp.add Wrapping _t_116 _t_120))
(define-fun _t_124 () (_ SFXP 32 16) (sfxp #x00009cac 16))
(define-fun _t_125 () (_ SFXP 32 16) (sfxp.mul Wrapping _t_3 _t_21 _t_124))
(define-fun _t_126 () (_ SFXP 32 16) (sfxp.add Wrapping _t_121 _t_125))
(define-fun _t_128 () (_ SFXP 32 16) (sfxp #x0000a72b 16))
(define-fun _t_129 () (_ SFXP 32 16) (sfxp.mul Wrapping _t_3 _t_25 _t_128))
(define-fun _t_130 () (_ SFXP 32 16) (sfxp.add Wrapping _t_126 _t_129))
(define-fun _t_133 () (_ SFXP 32 16) (sfxp #x0000d3b6 16))
(define-fun _t_134 () (_ SFXP 32 16) (sfxp.mul Wrapping _t_3 _t_29 _t_133))
(define-fun _t_135 () (_ SFXP 32 16) (sfxp.add Wrapping _t_130 _t_134))
(define-fun _t_136 () Bool (sfxp.leq _t_135 _t_111))
(assert _t_136)
(define-fun _t_138 () (_ SFXP 32 16) (sfxp #x00004872 16))
(define-fun _t_141 () (_ SFXP 32 16) (sfxp #x0000428f 16))
(define-fun _t_142 () (_ SFXP 32 16) (sfxp.mul Wrapping _t_3 _t_13 _t_141))
(define-fun _t_143 () (_ SFXP 32 16) (sfxp.add Wrapping _t_34 _t_142))
(define-fun _t_145 () (_ SFXP 32 16) (sfxp #x00001810 16))
(define-fun _t_146 () (_ SFXP 32 16) (sfxp.mul Wrapping _t_3 _t_17 _t_145))
(define-fun _t_147 () (_ SFXP 32 16) (sfxp.add Wrapping _t_143 _t_146))
(define-fun _t_149 () (_ SFXP 32 16) (sfxp #x000074fd 16))
(define-fun _t_150 () (_ SFXP 32 16) (sfxp.mul Wrapping _t_3 _t_21 _t_149))
(define-fun _t_151 () (_ SFXP 32 16) (sfxp.add Wrapping _t_147 _t_150))
(define-fun _t_154 () (_ SFXP 32 16) (sfxp #x0000d062 16))
(define-fun _t_155 () (_ SFXP 32 16) (sfxp.mul Wrapping _t_3 _t_25 _t_154))
(define-fun _t_156 () (_ SFXP 32 16) (sfxp.add Wrapping _t_151 _t_155))
(define-fun _t_158 () (_ SFXP 32 16) (sfxp #x0000b22d 16))
(define-fun _t_159 () (_ SFXP 32 16) (sfxp.mul Wrapping _t_3 _t_29 _t_158))
(define-fun _t_160 () (_ SFXP 32 16) (sfxp.add Wrapping _t_156 _t_159))
(define-fun _t_161 () Bool (sfxp.leq _t_138 _t_160))
(assert _t_161)
(check-sat)
(exit)
