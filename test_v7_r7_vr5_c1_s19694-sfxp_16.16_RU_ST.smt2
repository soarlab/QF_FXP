(set-info :smt-lib-version 2.6)
(set-logic QF_FXP)
(set-info :category "crafted")
(set-info :source |Alberto Griggio <griggio@fbk.eu>. These benchmarks were used for the evaluation in the following paper: L. Haller, A. Griggio, M. Brain, D. Kroening: Deciding floating-point logic with systematic abstraction. FMCAD 2012. Real-numbered literals have been automatically translated by MathSAT|)
(set-info :status sat)
;; MathSAT API call trace ;; generated on 05/20/15 17:24:57 
(declare-fun x0 () (_ SFXP 32 16))
(declare-fun x1 () (_ SFXP 32 16))
(declare-fun x2 () (_ SFXP 32 16))
(declare-fun x3 () (_ SFXP 32 16))
(declare-fun x4 () (_ SFXP 32 16))
(declare-fun x5 () (_ SFXP 32 16))
(declare-fun x6 () (_ SFXP 32 16))
(define-fun _t_10 () (_ SFXP 32 16) ((_ sfxp 16) #x00050000))
(define-fun _t_12 () (_ SFXP 32 16) ((_ sfxp 16) #x00050000))
(define-fun _t_13 () (_ SFXP 32 16) x0)
(define-fun _t_14 () Bool (sfxp.leq _t_12 _t_13))
(define-fun _t_15 () Bool (sfxp.leq _t_13 _t_10))
(define-fun _t_16 () Bool (and _t_14 _t_15))
(assert _t_16)
(define-fun _t_17 () (_ SFXP 32 16) x1)
(define-fun _t_18 () Bool (sfxp.leq _t_12 _t_17))
(define-fun _t_19 () Bool (sfxp.leq _t_17 _t_10))
(define-fun _t_20 () Bool (and _t_18 _t_19))
(assert _t_20)
(define-fun _t_21 () (_ SFXP 32 16) x2)
(define-fun _t_22 () Bool (sfxp.leq _t_12 _t_21))
(define-fun _t_23 () Bool (sfxp.leq _t_21 _t_10))
(define-fun _t_24 () Bool (and _t_22 _t_23))
(assert _t_24)
(define-fun _t_25 () (_ SFXP 32 16) x3)
(define-fun _t_26 () Bool (sfxp.leq _t_12 _t_25))
(define-fun _t_27 () Bool (sfxp.leq _t_25 _t_10))
(define-fun _t_28 () Bool (and _t_26 _t_27))
(assert _t_28)
(define-fun _t_29 () (_ SFXP 32 16) x4)
(define-fun _t_30 () Bool (sfxp.leq _t_12 _t_29))
(define-fun _t_31 () Bool (sfxp.leq _t_29 _t_10))
(define-fun _t_32 () Bool (and _t_30 _t_31))
(assert _t_32)
(define-fun _t_33 () (_ SFXP 32 16) x5)
(define-fun _t_34 () Bool (sfxp.leq _t_12 _t_33))
(define-fun _t_35 () Bool (sfxp.leq _t_33 _t_10))
(define-fun _t_36 () Bool (and _t_34 _t_35))
(assert _t_36)
(define-fun _t_37 () (_ SFXP 32 16) x6)
(define-fun _t_38 () Bool (sfxp.leq _t_12 _t_37))
(define-fun _t_39 () Bool (sfxp.leq _t_37 _t_10))
(define-fun _t_40 () Bool (and _t_38 _t_39))
(assert _t_40)
(define-fun _t_3 () RoundingMode roundUp)
(define-fun _t_42 () (_ SFXP 32 16) ((_ sfxp 16) #x00000000))
(define-fun _t_44 () (_ SFXP 32 16) ((_ sfxp 16) #x0000d53f))
(define-fun _t_47 () (_ SFXP 32 16) ((_ sfxp 16) #x0000978d))
(define-fun _t_48 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_13 _t_47))
(define-fun _t_49 () (_ SFXP 32 16) (sfxp.add saturation _t_42 _t_48))
(define-fun _t_52 () (_ SFXP 32 16) ((_ sfxp 16) #x00001604))
(define-fun _t_53 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_17 _t_52))
(define-fun _t_54 () (_ SFXP 32 16) (sfxp.add saturation _t_49 _t_53))
(define-fun _t_57 () (_ SFXP 32 16) ((_ sfxp 16) #x0000e20c))
(define-fun _t_58 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_21 _t_57))
(define-fun _t_59 () (_ SFXP 32 16) (sfxp.add saturation _t_54 _t_58))
(define-fun _t_61 () (_ SFXP 32 16) ((_ sfxp 16) #x00006f5c))
(define-fun _t_62 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_25 _t_61))
(define-fun _t_63 () (_ SFXP 32 16) (sfxp.add saturation _t_59 _t_62))
(define-fun _t_65 () (_ SFXP 32 16) ((_ sfxp 16) #x00000f5c))
(define-fun _t_66 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_29 _t_65))
(define-fun _t_67 () (_ SFXP 32 16) (sfxp.add saturation _t_63 _t_66))
(define-fun _t_70 () (_ SFXP 32 16) ((_ sfxp 16) #x0000a24d))
(define-fun _t_71 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_33 _t_70))
(define-fun _t_72 () (_ SFXP 32 16) (sfxp.add saturation _t_67 _t_71))
(define-fun _t_74 () (_ SFXP 32 16) ((_ sfxp 16) #x0000b6c8))
(define-fun _t_75 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_37 _t_74))
(define-fun _t_76 () (_ SFXP 32 16) (sfxp.add saturation _t_72 _t_75))
(define-fun _t_77 () Bool (sfxp.leq _t_76 _t_44))
(assert _t_77)
(define-fun _t_80 () (_ SFXP 32 16) ((_ sfxp 16) #x00006c8b))
(define-fun _t_83 () (_ SFXP 32 16) ((_ sfxp 16) #x0000a8f5))
(define-fun _t_84 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_13 _t_83))
(define-fun _t_85 () (_ SFXP 32 16) (sfxp.add saturation _t_42 _t_84))
(define-fun _t_87 () (_ SFXP 32 16) ((_ sfxp 16) #x00002c8b))
(define-fun _t_88 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_17 _t_87))
(define-fun _t_89 () (_ SFXP 32 16) (sfxp.add saturation _t_85 _t_88))
(define-fun _t_91 () (_ SFXP 32 16) ((_ sfxp 16) #x0000d999))
(define-fun _t_92 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_21 _t_91))
(define-fun _t_93 () (_ SFXP 32 16) (sfxp.add saturation _t_89 _t_92))
(define-fun _t_95 () (_ SFXP 32 16) ((_ sfxp 16) #x00008189))
(define-fun _t_96 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_25 _t_95))
(define-fun _t_97 () (_ SFXP 32 16) (sfxp.add saturation _t_93 _t_96))
(define-fun _t_99 () (_ SFXP 32 16) ((_ sfxp 16) #x0000f53f))
(define-fun _t_100 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_29 _t_99))
(define-fun _t_101 () (_ SFXP 32 16) (sfxp.add saturation _t_97 _t_100))
(define-fun _t_104 () (_ SFXP 32 16) ((_ sfxp 16) #x0000b645))
(define-fun _t_105 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_33 _t_104))
(define-fun _t_106 () (_ SFXP 32 16) (sfxp.add saturation _t_101 _t_105))
(define-fun _t_108 () (_ SFXP 32 16) ((_ sfxp 16) #x0000420c))
(define-fun _t_109 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_37 _t_108))
(define-fun _t_110 () (_ SFXP 32 16) (sfxp.add saturation _t_106 _t_109))
(define-fun _t_111 () Bool (sfxp.leq _t_110 _t_80))
(assert _t_111)
(define-fun _t_114 () (_ SFXP 32 16) ((_ sfxp 16) #x00009f3b))
(define-fun _t_116 () (_ SFXP 32 16) ((_ sfxp 16) #x00008a7e))
(define-fun _t_117 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_13 _t_116))
(define-fun _t_118 () (_ SFXP 32 16) (sfxp.add saturation _t_42 _t_117))
(define-fun _t_121 () (_ SFXP 32 16) ((_ sfxp 16) #x0000cb43))
(define-fun _t_122 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_17 _t_121))
(define-fun _t_123 () (_ SFXP 32 16) (sfxp.add saturation _t_118 _t_122))
(define-fun _t_125 () (_ SFXP 32 16) ((_ sfxp 16) #x0000a7ef))
(define-fun _t_126 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_21 _t_125))
(define-fun _t_127 () (_ SFXP 32 16) (sfxp.add saturation _t_123 _t_126))
(define-fun _t_129 () (_ SFXP 32 16) ((_ sfxp 16) #x00008e14))
(define-fun _t_130 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_25 _t_129))
(define-fun _t_131 () (_ SFXP 32 16) (sfxp.add saturation _t_127 _t_130))
(define-fun _t_133 () (_ SFXP 32 16) ((_ sfxp 16) #x00004395))
(define-fun _t_134 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_29 _t_133))
(define-fun _t_135 () (_ SFXP 32 16) (sfxp.add saturation _t_131 _t_134))
(define-fun _t_137 () (_ SFXP 32 16) ((_ sfxp 16) #x00005020))
(define-fun _t_138 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_33 _t_137))
(define-fun _t_139 () (_ SFXP 32 16) (sfxp.add saturation _t_135 _t_138))
(define-fun _t_141 () (_ SFXP 32 16) ((_ sfxp 16) #x0000820c))
(define-fun _t_142 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_37 _t_141))
(define-fun _t_143 () (_ SFXP 32 16) (sfxp.add saturation _t_139 _t_142))
(define-fun _t_144 () Bool (sfxp.leq _t_143 _t_114))
(assert _t_144)
(define-fun _t_147 () (_ SFXP 32 16) ((_ sfxp 16) #x00004ed9))
(define-fun _t_149 () (_ SFXP 32 16) ((_ sfxp 16) #x00001eb8))
(define-fun _t_150 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_13 _t_149))
(define-fun _t_151 () (_ SFXP 32 16) (sfxp.add saturation _t_42 _t_150))
(define-fun _t_154 () (_ SFXP 32 16) ((_ sfxp 16) #x00005ba5))
(define-fun _t_155 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_17 _t_154))
(define-fun _t_156 () (_ SFXP 32 16) (sfxp.add saturation _t_151 _t_155))
(define-fun _t_159 () (_ SFXP 32 16) ((_ sfxp 16) #x000068b4))
(define-fun _t_160 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_21 _t_159))
(define-fun _t_161 () (_ SFXP 32 16) (sfxp.add saturation _t_156 _t_160))
(define-fun _t_163 () (_ SFXP 32 16) ((_ sfxp 16) #x0000bbe7))
(define-fun _t_164 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_25 _t_163))
(define-fun _t_165 () (_ SFXP 32 16) (sfxp.add saturation _t_161 _t_164))
(define-fun _t_167 () (_ SFXP 32 16) ((_ sfxp 16) #x000050a3))
(define-fun _t_168 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_29 _t_167))
(define-fun _t_169 () (_ SFXP 32 16) (sfxp.add saturation _t_165 _t_168))
(define-fun _t_172 () (_ SFXP 32 16) ((_ sfxp 16) #x000046a7))
(define-fun _t_173 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_33 _t_172))
(define-fun _t_174 () (_ SFXP 32 16) (sfxp.add saturation _t_169 _t_173))
(define-fun _t_177 () (_ SFXP 32 16) ((_ sfxp 16) #x0000fe35))
(define-fun _t_178 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_37 _t_177))
(define-fun _t_179 () (_ SFXP 32 16) (sfxp.add saturation _t_174 _t_178))
(define-fun _t_180 () Bool (sfxp.leq _t_179 _t_147))
(assert _t_180)
(define-fun _t_181 () (_ SFXP 32 16) ((_ sfxp 16) #x00001604))
(define-fun _t_183 () (_ SFXP 32 16) ((_ sfxp 16) #x0000e147))
(define-fun _t_184 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_13 _t_181))
(define-fun _t_185 () (_ SFXP 32 16) (sfxp.add saturation _t_42 _t_184))
(define-fun _t_187 () (_ SFXP 32 16) ((_ sfxp 16) #x00007e76))
(define-fun _t_188 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_17 _t_187))
(define-fun _t_189 () (_ SFXP 32 16) (sfxp.add saturation _t_185 _t_188))
(define-fun _t_191 () (_ SFXP 32 16) ((_ sfxp 16) #x0000bf3b))
(define-fun _t_192 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_21 _t_191))
(define-fun _t_193 () (_ SFXP 32 16) (sfxp.add saturation _t_189 _t_192))
(define-fun _t_195 () (_ SFXP 32 16) ((_ sfxp 16) #x00009020))
(define-fun _t_196 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_25 _t_195))
(define-fun _t_197 () (_ SFXP 32 16) (sfxp.add saturation _t_193 _t_196))
(define-fun _t_200 () (_ SFXP 32 16) ((_ sfxp 16) #x000033f7))
(define-fun _t_201 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_29 _t_200))
(define-fun _t_202 () (_ SFXP 32 16) (sfxp.add saturation _t_197 _t_201))
(define-fun _t_204 () (_ SFXP 32 16) ((_ sfxp 16) #x00002395))
(define-fun _t_205 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_33 _t_204))
(define-fun _t_206 () (_ SFXP 32 16) (sfxp.add saturation _t_202 _t_205))
(define-fun _t_209 () (_ SFXP 32 16) ((_ sfxp 16) #x00009958))
(define-fun _t_210 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_37 _t_209))
(define-fun _t_211 () (_ SFXP 32 16) (sfxp.add saturation _t_206 _t_210))
(define-fun _t_212 () Bool (sfxp.leq _t_183 _t_211))
(assert _t_212)
(define-fun _t_214 () (_ SFXP 32 16) ((_ sfxp 16) #x0000cac0))
(define-fun _t_217 () (_ SFXP 32 16) ((_ sfxp 16) #x00000d91))
(define-fun _t_218 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_13 _t_217))
(define-fun _t_219 () (_ SFXP 32 16) (sfxp.add saturation _t_42 _t_218))
(define-fun _t_222 () (_ SFXP 32 16) ((_ sfxp 16) #x0000ce97))
(define-fun _t_223 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_17 _t_222))
(define-fun _t_224 () (_ SFXP 32 16) (sfxp.add saturation _t_219 _t_223))
(define-fun _t_227 () (_ SFXP 32 16) ((_ sfxp 16) #x00005df3))
(define-fun _t_228 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_21 _t_227))
(define-fun _t_229 () (_ SFXP 32 16) (sfxp.add saturation _t_224 _t_228))
(define-fun _t_231 () (_ SFXP 32 16) ((_ sfxp 16) #x0000d581))
(define-fun _t_232 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_25 _t_231))
(define-fun _t_233 () (_ SFXP 32 16) (sfxp.add saturation _t_229 _t_232))
(define-fun _t_235 () (_ SFXP 32 16) ((_ sfxp 16) #x00008c8b))
(define-fun _t_236 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_29 _t_235))
(define-fun _t_237 () (_ SFXP 32 16) (sfxp.add saturation _t_233 _t_236))
(define-fun _t_239 () (_ SFXP 32 16) ((_ sfxp 16) #x00007b64))
(define-fun _t_240 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_33 _t_239))
(define-fun _t_241 () (_ SFXP 32 16) (sfxp.add saturation _t_237 _t_240))
(define-fun _t_243 () (_ SFXP 32 16) ((_ sfxp 16) #x0000bf7c))
(define-fun _t_244 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_37 _t_243))
(define-fun _t_245 () (_ SFXP 32 16) (sfxp.add saturation _t_241 _t_244))
(define-fun _t_246 () Bool (sfxp.leq _t_214 _t_245))
(assert _t_246)
(define-fun _t_249 () (_ SFXP 32 16) ((_ sfxp 16) #x00003eb8))
(define-fun _t_252 () (_ SFXP 32 16) ((_ sfxp 16) #x0000f168))
(define-fun _t_253 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_13 _t_252))
(define-fun _t_254 () (_ SFXP 32 16) (sfxp.add saturation _t_42 _t_253))
(define-fun _t_256 () (_ SFXP 32 16) ((_ sfxp 16) #x0000726e))
(define-fun _t_257 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_17 _t_256))
(define-fun _t_258 () (_ SFXP 32 16) (sfxp.add saturation _t_254 _t_257))
(define-fun _t_260 () (_ SFXP 32 16) ((_ sfxp 16) #x0000bcac))
(define-fun _t_261 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_21 _t_260))
(define-fun _t_262 () (_ SFXP 32 16) (sfxp.add saturation _t_258 _t_261))
(define-fun _t_265 () (_ SFXP 32 16) ((_ sfxp 16) #x00007c6a))
(define-fun _t_266 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_25 _t_265))
(define-fun _t_267 () (_ SFXP 32 16) (sfxp.add saturation _t_262 _t_266))
(define-fun _t_270 () (_ SFXP 32 16) ((_ sfxp 16) #x00009604))
(define-fun _t_271 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_29 _t_270))
(define-fun _t_272 () (_ SFXP 32 16) (sfxp.add saturation _t_267 _t_271))
(define-fun _t_275 () (_ SFXP 32 16) ((_ sfxp 16) #x0000c872))
(define-fun _t_276 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_33 _t_275))
(define-fun _t_277 () (_ SFXP 32 16) (sfxp.add saturation _t_272 _t_276))
(define-fun _t_280 () (_ SFXP 32 16) ((_ sfxp 16) #x0000f1a9))
(define-fun _t_281 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_37 _t_280))
(define-fun _t_282 () (_ SFXP 32 16) (sfxp.add saturation _t_277 _t_281))
(define-fun _t_283 () Bool (sfxp.leq _t_282 _t_249))
(assert _t_283)
(check-sat)
(exit)
