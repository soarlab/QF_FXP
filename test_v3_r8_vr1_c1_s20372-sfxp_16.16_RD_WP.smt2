(set-info :smt-lib-version 2.6)
(set-logic QF_FXP)
(set-info :category "crafted")
(set-info :source |Alberto Griggio <griggio@fbk.eu>. These benchmarks were used for the evaluation in the following paper: L. Haller, A. Griggio, M. Brain, D. Kroening: Deciding floating-point logic with systematic abstraction. FMCAD 2012. Real-numbered literals have been automatically translated by MathSAT|)
(set-info :status unsat)
;; MathSAT API call trace ;; generated on 05/20/15 17:24:55 
(declare-fun x0 () (_ SFXP 32 16))
(declare-fun x1 () (_ SFXP 32 16))
(declare-fun x2 () (_ SFXP 32 16))
(define-fun _t_10 () (_ SFXP 32 16) ((_ sfxp 16) #x00010000))
(define-fun _t_12 () (_ SFXP 32 16) ((_ sfxp 16) #x00010000))
(define-fun _t_13 () (_ SFXP 32 16) x0)
(define-fun _t_14 () Bool (sfxp.leq _t_12 _t_13))
(define-fun _t_15 () Bool (sfxp.leq _t_13 _t_10))
(define-fun _t_16 () Bool (and _t_14 _t_15))
(assert _t_16)
(define-fun _t_17 () (_ SFXP 32 16) x1)
(define-fun _t_18 () Bool (sfxp.leq _t_12 _t_17))
(define-fun _t_19 () Bool (sfxp.leq _t_17 _t_10))
(define-fun _t_20 () Bool (and _t_18 _t_19))
(assert _t_20)
(define-fun _t_21 () (_ SFXP 32 16) x2)
(define-fun _t_22 () Bool (sfxp.leq _t_12 _t_21))
(define-fun _t_23 () Bool (sfxp.leq _t_21 _t_10))
(define-fun _t_24 () Bool (and _t_22 _t_23))
(assert _t_24)
(define-fun _t_3 () RoundingMode roundDown)
(define-fun _t_26 () (_ SFXP 32 16) ((_ sfxp 16) #x00000000))
(define-fun _t_29 () (_ SFXP 32 16) ((_ sfxp 16) #x000036c8))
(define-fun _t_31 () (_ SFXP 32 16) ((_ sfxp 16) #x0000f999))
(define-fun _t_32 () (_ SFXP 32 16) (sfxp.mul wrapAround _t_3 _t_13 _t_31))
(define-fun _t_33 () (_ SFXP 32 16) (sfxp.add wrapAround _t_26 _t_32))
(define-fun _t_36 () (_ SFXP 32 16) ((_ sfxp 16) #x000007ef))
(define-fun _t_37 () (_ SFXP 32 16) (sfxp.mul wrapAround _t_3 _t_17 _t_36))
(define-fun _t_38 () (_ SFXP 32 16) (sfxp.add wrapAround _t_33 _t_37))
(define-fun _t_40 () (_ SFXP 32 16) ((_ sfxp 16) #x0000e2d0))
(define-fun _t_41 () (_ SFXP 32 16) (sfxp.mul wrapAround _t_3 _t_21 _t_40))
(define-fun _t_42 () (_ SFXP 32 16) (sfxp.add wrapAround _t_38 _t_41))
(define-fun _t_43 () Bool (sfxp.leq _t_29 _t_42))
(assert _t_43)
(define-fun _t_46 () (_ SFXP 32 16) ((_ sfxp 16) #x000089ba))
(define-fun _t_48 () (_ SFXP 32 16) ((_ sfxp 16) #x0000de76))
(define-fun _t_49 () (_ SFXP 32 16) (sfxp.mul wrapAround _t_3 _t_13 _t_48))
(define-fun _t_50 () (_ SFXP 32 16) (sfxp.add wrapAround _t_26 _t_49))
(define-fun _t_53 () (_ SFXP 32 16) ((_ sfxp 16) #x000086a7))
(define-fun _t_54 () (_ SFXP 32 16) (sfxp.mul wrapAround _t_3 _t_17 _t_53))
(define-fun _t_55 () (_ SFXP 32 16) (sfxp.add wrapAround _t_50 _t_54))
(define-fun _t_57 () (_ SFXP 32 16) ((_ sfxp 16) #x0000db22))
(define-fun _t_58 () (_ SFXP 32 16) (sfxp.mul wrapAround _t_3 _t_21 _t_57))
(define-fun _t_59 () (_ SFXP 32 16) (sfxp.add wrapAround _t_55 _t_58))
(define-fun _t_60 () Bool (sfxp.leq _t_59 _t_46))
(assert _t_60)
(define-fun _t_62 () (_ SFXP 32 16) ((_ sfxp 16) #x0000b999))
(define-fun _t_64 () (_ SFXP 32 16) ((_ sfxp 16) #x0000f22d))
(define-fun _t_65 () (_ SFXP 32 16) (sfxp.mul wrapAround _t_3 _t_13 _t_64))
(define-fun _t_66 () (_ SFXP 32 16) (sfxp.add wrapAround _t_26 _t_65))
(define-fun _t_69 () (_ SFXP 32 16) ((_ sfxp 16) #x00003958))
(define-fun _t_70 () (_ SFXP 32 16) (sfxp.mul wrapAround _t_3 _t_17 _t_69))
(define-fun _t_71 () (_ SFXP 32 16) (sfxp.add wrapAround _t_66 _t_70))
(define-fun _t_74 () (_ SFXP 32 16) ((_ sfxp 16) #x00005d2f))
(define-fun _t_75 () (_ SFXP 32 16) (sfxp.mul wrapAround _t_3 _t_21 _t_74))
(define-fun _t_76 () (_ SFXP 32 16) (sfxp.add wrapAround _t_71 _t_75))
(define-fun _t_77 () Bool (sfxp.leq _t_62 _t_76))
(assert _t_77)
(define-fun _t_79 () (_ SFXP 32 16) ((_ sfxp 16) #x00003851))
(define-fun _t_82 () (_ SFXP 32 16) ((_ sfxp 16) #x00004418))
(define-fun _t_83 () (_ SFXP 32 16) (sfxp.mul wrapAround _t_3 _t_13 _t_82))
(define-fun _t_84 () (_ SFXP 32 16) (sfxp.add wrapAround _t_26 _t_83))
(define-fun _t_86 () (_ SFXP 32 16) ((_ sfxp 16) #x0000a0c4))
(define-fun _t_87 () (_ SFXP 32 16) (sfxp.mul wrapAround _t_3 _t_17 _t_86))
(define-fun _t_88 () (_ SFXP 32 16) (sfxp.add wrapAround _t_84 _t_87))
(define-fun _t_90 () (_ SFXP 32 16) ((_ sfxp 16) #x0000e872))
(define-fun _t_91 () (_ SFXP 32 16) (sfxp.mul wrapAround _t_3 _t_21 _t_90))
(define-fun _t_92 () (_ SFXP 32 16) (sfxp.add wrapAround _t_88 _t_91))
(define-fun _t_93 () Bool (sfxp.leq _t_79 _t_92))
(assert _t_93)
(define-fun _t_96 () (_ SFXP 32 16) ((_ sfxp 16) #x0000b604))
(define-fun _t_98 () (_ SFXP 32 16) ((_ sfxp 16) #x00003df3))
(define-fun _t_99 () (_ SFXP 32 16) (sfxp.mul wrapAround _t_3 _t_13 _t_98))
(define-fun _t_100 () (_ SFXP 32 16) (sfxp.add wrapAround _t_26 _t_99))
(define-fun _t_102 () (_ SFXP 32 16) ((_ sfxp 16) #x00006624))
(define-fun _t_103 () (_ SFXP 32 16) (sfxp.mul wrapAround _t_3 _t_17 _t_102))
(define-fun _t_104 () (_ SFXP 32 16) (sfxp.add wrapAround _t_100 _t_103))
(define-fun _t_106 () (_ SFXP 32 16) ((_ sfxp 16) #x00002ed9))
(define-fun _t_107 () (_ SFXP 32 16) (sfxp.mul wrapAround _t_3 _t_21 _t_106))
(define-fun _t_108 () (_ SFXP 32 16) (sfxp.add wrapAround _t_104 _t_107))
(define-fun _t_109 () Bool (sfxp.leq _t_96 _t_108))
(assert _t_109)
(define-fun _t_112 () (_ SFXP 32 16) ((_ sfxp 16) #x00009020))
(define-fun _t_115 () (_ SFXP 32 16) ((_ sfxp 16) #x0000820c))
(define-fun _t_116 () (_ SFXP 32 16) (sfxp.mul wrapAround _t_3 _t_13 _t_115))
(define-fun _t_117 () (_ SFXP 32 16) (sfxp.add wrapAround _t_26 _t_116))
(define-fun _t_119 () (_ SFXP 32 16) ((_ sfxp 16) #x00003333))
(define-fun _t_120 () (_ SFXP 32 16) (sfxp.mul wrapAround _t_3 _t_17 _t_119))
(define-fun _t_121 () (_ SFXP 32 16) (sfxp.add wrapAround _t_117 _t_120))
(define-fun _t_123 () (_ SFXP 32 16) ((_ sfxp 16) #x00004f9d))
(define-fun _t_124 () (_ SFXP 32 16) (sfxp.mul wrapAround _t_3 _t_21 _t_123))
(define-fun _t_125 () (_ SFXP 32 16) (sfxp.add wrapAround _t_121 _t_124))
(define-fun _t_126 () Bool (sfxp.leq _t_112 _t_125))
(assert _t_126)
(define-fun _t_129 () (_ SFXP 32 16) ((_ sfxp 16) #x00003062))
(define-fun _t_132 () (_ SFXP 32 16) ((_ sfxp 16) #x000005e3))
(define-fun _t_133 () (_ SFXP 32 16) (sfxp.mul wrapAround _t_3 _t_13 _t_132))
(define-fun _t_134 () (_ SFXP 32 16) (sfxp.add wrapAround _t_26 _t_133))
(define-fun _t_137 () (_ SFXP 32 16) ((_ sfxp 16) #x0000bef9))
(define-fun _t_138 () (_ SFXP 32 16) (sfxp.mul wrapAround _t_3 _t_17 _t_137))
(define-fun _t_139 () (_ SFXP 32 16) (sfxp.add wrapAround _t_134 _t_138))
(define-fun _t_141 () (_ SFXP 32 16) ((_ sfxp 16) #x0000dcac))
(define-fun _t_142 () (_ SFXP 32 16) (sfxp.mul wrapAround _t_3 _t_21 _t_141))
(define-fun _t_143 () (_ SFXP 32 16) (sfxp.add wrapAround _t_139 _t_142))
(define-fun _t_144 () Bool (sfxp.leq _t_143 _t_129))
(assert _t_144)
(define-fun _t_147 () (_ SFXP 32 16) ((_ sfxp 16) #x0000eb85))
(define-fun _t_150 () (_ SFXP 32 16) ((_ sfxp 16) #x000074fd))
(define-fun _t_151 () (_ SFXP 32 16) (sfxp.mul wrapAround _t_3 _t_13 _t_150))
(define-fun _t_152 () (_ SFXP 32 16) (sfxp.add wrapAround _t_26 _t_151))
(define-fun _t_154 () (_ SFXP 32 16) ((_ sfxp 16) #x0000e24d))
(define-fun _t_155 () (_ SFXP 32 16) (sfxp.mul wrapAround _t_3 _t_17 _t_154))
(define-fun _t_156 () (_ SFXP 32 16) (sfxp.add wrapAround _t_152 _t_155))
(define-fun _t_158 () (_ SFXP 32 16) ((_ sfxp 16) #x00004e14))
(define-fun _t_159 () (_ SFXP 32 16) (sfxp.mul wrapAround _t_3 _t_21 _t_158))
(define-fun _t_160 () (_ SFXP 32 16) (sfxp.add wrapAround _t_156 _t_159))
(define-fun _t_161 () Bool (sfxp.leq _t_160 _t_147))
(assert _t_161)
(check-sat)
(exit)
