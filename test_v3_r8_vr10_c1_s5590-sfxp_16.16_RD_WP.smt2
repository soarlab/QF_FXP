(set-info :smt-lib-version 2.6)
(set-logic QF_FXP)
(set-info :category "crafted")
(set-info :source |Alberto Griggio <griggio@fbk.eu>. These benchmarks were used for the evaluation in the following paper: L. Haller, A. Griggio, M. Brain, D. Kroening: Deciding floating-point logic with systematic abstraction. FMCAD 2012. Real-numbered literals have been automatically translated by MathSAT|)
(set-info :status sat)
;; MathSAT API call trace ;; generated on 05/20/15 17:24:55 
(declare-fun x0 () (_ SFXP 32 16))
(declare-fun x1 () (_ SFXP 32 16))
(declare-fun x2 () (_ SFXP 32 16))
(define-fun _t_10 () (_ SFXP 32 16) ((_ sfxp 16) #x000a0000))
(define-fun _t_12 () (_ SFXP 32 16) ((_ sfxp 16) #x000a0000))
(define-fun _t_13 () (_ SFXP 32 16) x0)
(define-fun _t_14 () Bool (sfxp.leq _t_12 _t_13))
(define-fun _t_15 () Bool (sfxp.leq _t_13 _t_10))
(define-fun _t_16 () Bool (and _t_14 _t_15))
(assert _t_16)
(define-fun _t_17 () (_ SFXP 32 16) x1)
(define-fun _t_18 () Bool (sfxp.leq _t_12 _t_17))
(define-fun _t_19 () Bool (sfxp.leq _t_17 _t_10))
(define-fun _t_20 () Bool (and _t_18 _t_19))
(assert _t_20)
(define-fun _t_21 () (_ SFXP 32 16) x2)
(define-fun _t_22 () Bool (sfxp.leq _t_12 _t_21))
(define-fun _t_23 () Bool (sfxp.leq _t_21 _t_10))
(define-fun _t_24 () Bool (and _t_22 _t_23))
(assert _t_24)
(define-fun _t_3 () RoundingMode roundDown)
(define-fun _t_26 () (_ SFXP 32 16) ((_ sfxp 16) #x00000000))
(define-fun _t_28 () (_ SFXP 32 16) ((_ sfxp 16) #x0000f020))
(define-fun _t_30 () (_ SFXP 32 16) ((_ sfxp 16) #x0000153f))
(define-fun _t_31 () (_ SFXP 32 16) (sfxp.mul wrapAround _t_3 _t_13 _t_30))
(define-fun _t_32 () (_ SFXP 32 16) (sfxp.add wrapAround _t_26 _t_31))
(define-fun _t_35 () (_ SFXP 32 16) ((_ sfxp 16) #x0000bc28))
(define-fun _t_36 () (_ SFXP 32 16) (sfxp.mul wrapAround _t_3 _t_17 _t_35))
(define-fun _t_37 () (_ SFXP 32 16) (sfxp.add wrapAround _t_32 _t_36))
(define-fun _t_40 () (_ SFXP 32 16) ((_ sfxp 16) #x00004ccc))
(define-fun _t_41 () (_ SFXP 32 16) (sfxp.mul wrapAround _t_3 _t_21 _t_40))
(define-fun _t_42 () (_ SFXP 32 16) (sfxp.add wrapAround _t_37 _t_41))
(define-fun _t_43 () Bool (sfxp.leq _t_42 _t_28))
(assert _t_43)
(define-fun _t_46 () (_ SFXP 32 16) ((_ sfxp 16) #x00008ed9))
(define-fun _t_48 () (_ SFXP 32 16) ((_ sfxp 16) #x00005604))
(define-fun _t_49 () (_ SFXP 32 16) (sfxp.mul wrapAround _t_3 _t_13 _t_48))
(define-fun _t_50 () (_ SFXP 32 16) (sfxp.add wrapAround _t_26 _t_49))
(define-fun _t_53 () (_ SFXP 32 16) ((_ sfxp 16) #x0000f645))
(define-fun _t_54 () (_ SFXP 32 16) (sfxp.mul wrapAround _t_3 _t_17 _t_53))
(define-fun _t_55 () (_ SFXP 32 16) (sfxp.add wrapAround _t_50 _t_54))
(define-fun _t_58 () (_ SFXP 32 16) ((_ sfxp 16) #x0000522d))
(define-fun _t_59 () (_ SFXP 32 16) (sfxp.mul wrapAround _t_3 _t_21 _t_58))
(define-fun _t_60 () (_ SFXP 32 16) (sfxp.add wrapAround _t_55 _t_59))
(define-fun _t_61 () Bool (sfxp.leq _t_46 _t_60))
(assert _t_61)
(define-fun _t_63 () (_ SFXP 32 16) ((_ sfxp 16) #x0000a353))
(define-fun _t_65 () (_ SFXP 32 16) ((_ sfxp 16) #x00009916))
(define-fun _t_66 () (_ SFXP 32 16) (sfxp.mul wrapAround _t_3 _t_13 _t_65))
(define-fun _t_67 () (_ SFXP 32 16) (sfxp.add wrapAround _t_26 _t_66))
(define-fun _t_69 () (_ SFXP 32 16) ((_ sfxp 16) #x0000cbc6))
(define-fun _t_70 () (_ SFXP 32 16) (sfxp.mul wrapAround _t_3 _t_17 _t_69))
(define-fun _t_71 () (_ SFXP 32 16) (sfxp.add wrapAround _t_67 _t_70))
(define-fun _t_73 () (_ SFXP 32 16) ((_ sfxp 16) #x00002c08))
(define-fun _t_74 () (_ SFXP 32 16) (sfxp.mul wrapAround _t_3 _t_21 _t_73))
(define-fun _t_75 () (_ SFXP 32 16) (sfxp.add wrapAround _t_71 _t_74))
(define-fun _t_76 () Bool (sfxp.leq _t_63 _t_75))
(assert _t_76)
(define-fun _t_78 () (_ SFXP 32 16) ((_ sfxp 16) #x0000f999))
(define-fun _t_80 () (_ SFXP 32 16) ((_ sfxp 16) #x0000f4bc))
(define-fun _t_81 () (_ SFXP 32 16) (sfxp.mul wrapAround _t_3 _t_13 _t_80))
(define-fun _t_82 () (_ SFXP 32 16) (sfxp.add wrapAround _t_26 _t_81))
(define-fun _t_85 () (_ SFXP 32 16) ((_ sfxp 16) #x00004bc6))
(define-fun _t_86 () (_ SFXP 32 16) (sfxp.mul wrapAround _t_3 _t_17 _t_85))
(define-fun _t_87 () (_ SFXP 32 16) (sfxp.add wrapAround _t_82 _t_86))
(define-fun _t_89 () (_ SFXP 32 16) ((_ sfxp 16) #x00009ced))
(define-fun _t_90 () (_ SFXP 32 16) (sfxp.mul wrapAround _t_3 _t_21 _t_89))
(define-fun _t_91 () (_ SFXP 32 16) (sfxp.add wrapAround _t_87 _t_90))
(define-fun _t_92 () Bool (sfxp.leq _t_91 _t_78))
(assert _t_92)
(define-fun _t_95 () (_ SFXP 32 16) ((_ sfxp 16) #x0000d26e))
(define-fun _t_98 () (_ SFXP 32 16) ((_ sfxp 16) #x00006106))
(define-fun _t_99 () (_ SFXP 32 16) (sfxp.mul wrapAround _t_3 _t_13 _t_98))
(define-fun _t_100 () (_ SFXP 32 16) (sfxp.add wrapAround _t_26 _t_99))
(define-fun _t_103 () (_ SFXP 32 16) ((_ sfxp 16) #x0000d3f7))
(define-fun _t_104 () (_ SFXP 32 16) (sfxp.mul wrapAround _t_3 _t_17 _t_103))
(define-fun _t_105 () (_ SFXP 32 16) (sfxp.add wrapAround _t_100 _t_104))
(define-fun _t_107 () (_ SFXP 32 16) ((_ sfxp 16) #x0000e3d7))
(define-fun _t_108 () (_ SFXP 32 16) (sfxp.mul wrapAround _t_3 _t_21 _t_107))
(define-fun _t_109 () (_ SFXP 32 16) (sfxp.add wrapAround _t_105 _t_108))
(define-fun _t_110 () Bool (sfxp.leq _t_95 _t_109))
(assert _t_110)
(define-fun _t_112 () (_ SFXP 32 16) ((_ sfxp 16) #x00008937))
(define-fun _t_114 () (_ SFXP 32 16) ((_ sfxp 16) #x00001893))
(define-fun _t_115 () (_ SFXP 32 16) (sfxp.mul wrapAround _t_3 _t_13 _t_114))
(define-fun _t_116 () (_ SFXP 32 16) (sfxp.add wrapAround _t_26 _t_115))
(define-fun _t_118 () (_ SFXP 32 16) ((_ sfxp 16) #x0000c312))
(define-fun _t_119 () (_ SFXP 32 16) (sfxp.mul wrapAround _t_3 _t_17 _t_118))
(define-fun _t_120 () (_ SFXP 32 16) (sfxp.add wrapAround _t_116 _t_119))
(define-fun _t_123 () (_ SFXP 32 16) ((_ sfxp 16) #x0000a937))
(define-fun _t_124 () (_ SFXP 32 16) (sfxp.mul wrapAround _t_3 _t_21 _t_123))
(define-fun _t_125 () (_ SFXP 32 16) (sfxp.add wrapAround _t_120 _t_124))
(define-fun _t_126 () Bool (sfxp.leq _t_112 _t_125))
(assert _t_126)
(define-fun _t_129 () (_ SFXP 32 16) ((_ sfxp 16) #x0000cccc))
(define-fun _t_131 () (_ SFXP 32 16) ((_ sfxp 16) #x00005b64))
(define-fun _t_132 () (_ SFXP 32 16) (sfxp.mul wrapAround _t_3 _t_13 _t_131))
(define-fun _t_133 () (_ SFXP 32 16) (sfxp.add wrapAround _t_26 _t_132))
(define-fun _t_135 () (_ SFXP 32 16) ((_ sfxp 16) #x00001be7))
(define-fun _t_136 () (_ SFXP 32 16) (sfxp.mul wrapAround _t_3 _t_17 _t_135))
(define-fun _t_137 () (_ SFXP 32 16) (sfxp.add wrapAround _t_133 _t_136))
(define-fun _t_140 () (_ SFXP 32 16) ((_ sfxp 16) #x0000b999))
(define-fun _t_141 () (_ SFXP 32 16) (sfxp.mul wrapAround _t_3 _t_21 _t_140))
(define-fun _t_142 () (_ SFXP 32 16) (sfxp.add wrapAround _t_137 _t_141))
(define-fun _t_143 () Bool (sfxp.leq _t_129 _t_142))
(assert _t_143)
(define-fun _t_146 () (_ SFXP 32 16) ((_ sfxp 16) #x0000fe76))
(define-fun _t_148 () (_ SFXP 32 16) ((_ sfxp 16) #x00003333))
(define-fun _t_149 () (_ SFXP 32 16) (sfxp.mul wrapAround _t_3 _t_13 _t_148))
(define-fun _t_150 () (_ SFXP 32 16) (sfxp.add wrapAround _t_26 _t_149))
(define-fun _t_152 () (_ SFXP 32 16) ((_ sfxp 16) #x00003db2))
(define-fun _t_153 () (_ SFXP 32 16) (sfxp.mul wrapAround _t_3 _t_17 _t_152))
(define-fun _t_154 () (_ SFXP 32 16) (sfxp.add wrapAround _t_150 _t_153))
(define-fun _t_157 () (_ SFXP 32 16) ((_ sfxp 16) #x00006147))
(define-fun _t_158 () (_ SFXP 32 16) (sfxp.mul wrapAround _t_3 _t_21 _t_157))
(define-fun _t_159 () (_ SFXP 32 16) (sfxp.add wrapAround _t_154 _t_158))
(define-fun _t_160 () Bool (sfxp.leq _t_146 _t_159))
(assert _t_160)
(check-sat)
(exit)
