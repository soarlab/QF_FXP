(set-info :smt-lib-version 2.6)
(set-logic QF_FXP)
(set-info :category "crafted")
(set-info :source |Alberto Griggio <griggio@fbk.eu>. These benchmarks were used for the evaluation in the following paper: L. Haller, A. Griggio, M. Brain, D. Kroening: Deciding floating-point logic with systematic abstraction. FMCAD 2012. Real-numbered literals have been automatically translated by MathSAT|)
(set-info :status unsat)
;; MathSAT API call trace ;; generated on 05/20/15 17:24:55 
(declare-fun x0 () (_ SFXP 32 16))
(declare-fun x1 () (_ SFXP 32 16))
(declare-fun x2 () (_ SFXP 32 16))
(define-fun _t_10 () (_ SFXP 32 16) ((_ sfxp 16) #x00050000))
(define-fun _t_12 () (_ SFXP 32 16) ((_ sfxp 16) #x00050000))
(define-fun _t_13 () (_ SFXP 32 16) x0)
(define-fun _t_14 () Bool (sfxp.leq _t_12 _t_13))
(define-fun _t_15 () Bool (sfxp.leq _t_13 _t_10))
(define-fun _t_16 () Bool (and _t_14 _t_15))
(assert _t_16)
(define-fun _t_17 () (_ SFXP 32 16) x1)
(define-fun _t_18 () Bool (sfxp.leq _t_12 _t_17))
(define-fun _t_19 () Bool (sfxp.leq _t_17 _t_10))
(define-fun _t_20 () Bool (and _t_18 _t_19))
(assert _t_20)
(define-fun _t_21 () (_ SFXP 32 16) x2)
(define-fun _t_22 () Bool (sfxp.leq _t_12 _t_21))
(define-fun _t_23 () Bool (sfxp.leq _t_21 _t_10))
(define-fun _t_24 () Bool (and _t_22 _t_23))
(assert _t_24)
(define-fun _t_3 () RoundingMode roundUp)
(define-fun _t_26 () (_ SFXP 32 16) ((_ sfxp 16) #x00000000))
(define-fun _t_28 () (_ SFXP 32 16) ((_ sfxp 16) #x000039db))
(define-fun _t_31 () (_ SFXP 32 16) ((_ sfxp 16) #x0000afdf))
(define-fun _t_32 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_13 _t_31))
(define-fun _t_33 () (_ SFXP 32 16) (sfxp.add saturation _t_26 _t_32))
(define-fun _t_35 () (_ SFXP 32 16) ((_ sfxp 16) #x00004e14))
(define-fun _t_36 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_17 _t_35))
(define-fun _t_37 () (_ SFXP 32 16) (sfxp.add saturation _t_33 _t_36))
(define-fun _t_39 () (_ SFXP 32 16) ((_ sfxp 16) #x00001e76))
(define-fun _t_40 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_21 _t_39))
(define-fun _t_41 () (_ SFXP 32 16) (sfxp.add saturation _t_37 _t_40))
(define-fun _t_42 () Bool (sfxp.leq _t_41 _t_28))
(assert _t_42)
(define-fun _t_44 () (_ SFXP 32 16) ((_ sfxp 16) #x0000d958))
(define-fun _t_47 () (_ SFXP 32 16) ((_ sfxp 16) #x0000d333))
(define-fun _t_48 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_13 _t_47))
(define-fun _t_49 () (_ SFXP 32 16) (sfxp.add saturation _t_26 _t_48))
(define-fun _t_52 () (_ SFXP 32 16) ((_ sfxp 16) #x00001c6a))
(define-fun _t_53 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_17 _t_52))
(define-fun _t_54 () (_ SFXP 32 16) (sfxp.add saturation _t_49 _t_53))
(define-fun _t_57 () (_ SFXP 32 16) ((_ sfxp 16) #x0000b958))
(define-fun _t_58 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_21 _t_57))
(define-fun _t_59 () (_ SFXP 32 16) (sfxp.add saturation _t_54 _t_58))
(define-fun _t_60 () Bool (sfxp.leq _t_44 _t_59))
(assert _t_60)
(define-fun _t_63 () (_ SFXP 32 16) ((_ sfxp 16) #x0000b22d))
(define-fun _t_65 () (_ SFXP 32 16) ((_ sfxp 16) #x00004fdf))
(define-fun _t_66 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_13 _t_65))
(define-fun _t_67 () (_ SFXP 32 16) (sfxp.add saturation _t_26 _t_66))
(define-fun _t_70 () (_ SFXP 32 16) ((_ sfxp 16) #x0000dcac))
(define-fun _t_71 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_17 _t_70))
(define-fun _t_72 () (_ SFXP 32 16) (sfxp.add saturation _t_67 _t_71))
(define-fun _t_75 () (_ SFXP 32 16) ((_ sfxp 16) #x000033b6))
(define-fun _t_76 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_21 _t_75))
(define-fun _t_77 () (_ SFXP 32 16) (sfxp.add saturation _t_72 _t_76))
(define-fun _t_78 () Bool (sfxp.leq _t_63 _t_77))
(assert _t_78)
(define-fun _t_80 () (_ SFXP 32 16) ((_ sfxp 16) #x00006c49))
(define-fun _t_83 () (_ SFXP 32 16) ((_ sfxp 16) #x00005ced))
(define-fun _t_84 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_13 _t_83))
(define-fun _t_85 () (_ SFXP 32 16) (sfxp.add saturation _t_26 _t_84))
(define-fun _t_87 () (_ SFXP 32 16) ((_ sfxp 16) #x00006d91))
(define-fun _t_88 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_17 _t_87))
(define-fun _t_89 () (_ SFXP 32 16) (sfxp.add saturation _t_85 _t_88))
(define-fun _t_92 () (_ SFXP 32 16) ((_ sfxp 16) #x000098d4))
(define-fun _t_93 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_21 _t_92))
(define-fun _t_94 () (_ SFXP 32 16) (sfxp.add saturation _t_89 _t_93))
(define-fun _t_95 () Bool (sfxp.leq _t_80 _t_94))
(assert _t_95)
(define-fun _t_97 () (_ SFXP 32 16) ((_ sfxp 16) #x00006189))
(define-fun _t_100 () (_ SFXP 32 16) ((_ sfxp 16) #x000006e9))
(define-fun _t_101 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_13 _t_100))
(define-fun _t_102 () (_ SFXP 32 16) (sfxp.add saturation _t_26 _t_101))
(define-fun _t_105 () (_ SFXP 32 16) ((_ sfxp 16) #x0000aa3d))
(define-fun _t_106 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_17 _t_105))
(define-fun _t_107 () (_ SFXP 32 16) (sfxp.add saturation _t_102 _t_106))
(define-fun _t_110 () (_ SFXP 32 16) ((_ sfxp 16) #x0000bfbe))
(define-fun _t_111 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_21 _t_110))
(define-fun _t_112 () (_ SFXP 32 16) (sfxp.add saturation _t_107 _t_111))
(define-fun _t_113 () Bool (sfxp.leq _t_97 _t_112))
(assert _t_113)
(define-fun _t_115 () (_ SFXP 32 16) ((_ sfxp 16) #x00009fbe))
(define-fun _t_117 () (_ SFXP 32 16) ((_ sfxp 16) #x00006666))
(define-fun _t_118 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_13 _t_117))
(define-fun _t_119 () (_ SFXP 32 16) (sfxp.add saturation _t_26 _t_118))
(define-fun _t_122 () (_ SFXP 32 16) ((_ sfxp 16) #x0000bd2f))
(define-fun _t_123 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_17 _t_122))
(define-fun _t_124 () (_ SFXP 32 16) (sfxp.add saturation _t_119 _t_123))
(define-fun _t_127 () (_ SFXP 32 16) ((_ sfxp 16) #x00008083))
(define-fun _t_128 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_21 _t_127))
(define-fun _t_129 () (_ SFXP 32 16) (sfxp.add saturation _t_124 _t_128))
(define-fun _t_130 () Bool (sfxp.leq _t_129 _t_115))
(assert _t_130)
(define-fun _t_132 () (_ SFXP 32 16) ((_ sfxp 16) #x0000deb8))
(define-fun _t_134 () (_ SFXP 32 16) ((_ sfxp 16) #x0000ca7e))
(define-fun _t_135 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_13 _t_134))
(define-fun _t_136 () (_ SFXP 32 16) (sfxp.add saturation _t_26 _t_135))
(define-fun _t_137 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_17 _t_39))
(define-fun _t_138 () (_ SFXP 32 16) (sfxp.add saturation _t_136 _t_137))
(define-fun _t_140 () (_ SFXP 32 16) ((_ sfxp 16) #x0000cb43))
(define-fun _t_141 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_21 _t_140))
(define-fun _t_142 () (_ SFXP 32 16) (sfxp.add saturation _t_138 _t_141))
(define-fun _t_143 () Bool (sfxp.leq _t_142 _t_132))
(assert _t_143)
(define-fun _t_146 () (_ SFXP 32 16) ((_ sfxp 16) #x000059db))
(define-fun _t_149 () (_ SFXP 32 16) ((_ sfxp 16) #x0000cb02))
(define-fun _t_150 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_13 _t_149))
(define-fun _t_151 () (_ SFXP 32 16) (sfxp.add saturation _t_26 _t_150))
(define-fun _t_153 () (_ SFXP 32 16) ((_ sfxp 16) #x0000a4dd))
(define-fun _t_154 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_17 _t_153))
(define-fun _t_155 () (_ SFXP 32 16) (sfxp.add saturation _t_151 _t_154))
(define-fun _t_158 () (_ SFXP 32 16) ((_ sfxp 16) #x00004f1a))
(define-fun _t_159 () (_ SFXP 32 16) (sfxp.mul saturation _t_3 _t_21 _t_158))
(define-fun _t_160 () (_ SFXP 32 16) (sfxp.add saturation _t_155 _t_159))
(define-fun _t_161 () Bool (sfxp.leq _t_160 _t_146))
(assert _t_161)
(check-sat)
(exit)
