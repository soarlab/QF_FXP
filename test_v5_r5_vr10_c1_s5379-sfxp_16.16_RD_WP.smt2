(set-info :smt-lib-version 2.6)
(set-logic QF_FXP)
(set-info :category "crafted")
(set-info :source |Alberto Griggio <griggio@fbk.eu>. These benchmarks were used for the evaluation in the following paper: L. Haller, A. Griggio, M. Brain, D. Kroening: Deciding floating-point logic with systematic abstraction. FMCAD 2012. Real-numbered literals have been automatically translated by MathSAT|)
(set-info :status unsat)
;; MathSAT API call trace ;; generated on 05/20/15 17:24:56 
(declare-fun x0 () (_ SFXP 32 16))
(declare-fun x1 () (_ SFXP 32 16))
(declare-fun x2 () (_ SFXP 32 16))
(declare-fun x3 () (_ SFXP 32 16))
(declare-fun x4 () (_ SFXP 32 16))
(define-fun _t_10 () (_ SFXP 32 16) (sfxp #x000a0000 16))
(define-fun _t_12 () (_ SFXP 32 16) (sfxp #x000a0000 16))
(define-fun _t_13 () (_ SFXP 32 16) x0)
(define-fun _t_14 () Bool (sfxp.leq _t_12 _t_13))
(define-fun _t_15 () Bool (sfxp.leq _t_13 _t_10))
(define-fun _t_16 () Bool (and _t_14 _t_15))
(assert _t_16)
(define-fun _t_17 () (_ SFXP 32 16) x1)
(define-fun _t_18 () Bool (sfxp.leq _t_12 _t_17))
(define-fun _t_19 () Bool (sfxp.leq _t_17 _t_10))
(define-fun _t_20 () Bool (and _t_18 _t_19))
(assert _t_20)
(define-fun _t_21 () (_ SFXP 32 16) x2)
(define-fun _t_22 () Bool (sfxp.leq _t_12 _t_21))
(define-fun _t_23 () Bool (sfxp.leq _t_21 _t_10))
(define-fun _t_24 () Bool (and _t_22 _t_23))
(assert _t_24)
(define-fun _t_25 () (_ SFXP 32 16) x3)
(define-fun _t_26 () Bool (sfxp.leq _t_12 _t_25))
(define-fun _t_27 () Bool (sfxp.leq _t_25 _t_10))
(define-fun _t_28 () Bool (and _t_26 _t_27))
(assert _t_28)
(define-fun _t_29 () (_ SFXP 32 16) x4)
(define-fun _t_30 () Bool (sfxp.leq _t_12 _t_29))
(define-fun _t_31 () Bool (sfxp.leq _t_29 _t_10))
(define-fun _t_32 () Bool (and _t_30 _t_31))
(assert _t_32)
(define-fun _t_3 () RoundingMode RNE)
(define-fun _t_34 () (_ SFXP 32 16) (sfxp #x00000000 16))
(define-fun _t_36 () (_ SFXP 32 16) (sfxp #x00007851 16))
(define-fun _t_38 () (_ SFXP 32 16) (sfxp #x000070a3 16))
(define-fun _t_39 () (_ SFXP 32 16) (sfxp.mul Wrapping roundTowardNegative _t_13 _t_38))
(define-fun _t_40 () (_ SFXP 32 16) (sfxp.add Wrapping _t_34 _t_39))
(define-fun _t_42 () (_ SFXP 32 16) (sfxp #x0000aac0 16))
(define-fun _t_43 () (_ SFXP 32 16) (sfxp.mul Wrapping roundTowardNegative _t_17 _t_42))
(define-fun _t_44 () (_ SFXP 32 16) (sfxp.add Wrapping _t_40 _t_43))
(define-fun _t_46 () (_ SFXP 32 16) (sfxp #x0000ac8b 16))
(define-fun _t_47 () (_ SFXP 32 16) (sfxp.mul Wrapping roundTowardNegative _t_21 _t_46))
(define-fun _t_48 () (_ SFXP 32 16) (sfxp.add Wrapping _t_44 _t_47))
(define-fun _t_50 () (_ SFXP 32 16) (sfxp #x0000f168 16))
(define-fun _t_51 () (_ SFXP 32 16) (sfxp.mul Wrapping roundTowardNegative _t_25 _t_50))
(define-fun _t_52 () (_ SFXP 32 16) (sfxp.add Wrapping _t_48 _t_51))
(define-fun _t_55 () (_ SFXP 32 16) (sfxp #x00006831 16))
(define-fun _t_56 () (_ SFXP 32 16) (sfxp.mul Wrapping roundTowardNegative _t_29 _t_55))
(define-fun _t_57 () (_ SFXP 32 16) (sfxp.add Wrapping _t_52 _t_56))
(define-fun _t_58 () Bool (sfxp.leq _t_36 _t_57))
(assert _t_58)
(define-fun _t_61 () (_ SFXP 32 16) (sfxp #x000078d4 16))
(define-fun _t_63 () (_ SFXP 32 16) (sfxp #x00001e35 16))
(define-fun _t_64 () (_ SFXP 32 16) (sfxp.mul Wrapping roundTowardNegative _t_13 _t_63))
(define-fun _t_65 () (_ SFXP 32 16) (sfxp.add Wrapping _t_34 _t_64))
(define-fun _t_68 () (_ SFXP 32 16) (sfxp #x00007b64 16))
(define-fun _t_69 () (_ SFXP 32 16) (sfxp.mul Wrapping roundTowardNegative _t_17 _t_68))
(define-fun _t_70 () (_ SFXP 32 16) (sfxp.add Wrapping _t_65 _t_69))
(define-fun _t_73 () (_ SFXP 32 16) (sfxp #x00002c8b 16))
(define-fun _t_74 () (_ SFXP 32 16) (sfxp.mul Wrapping roundTowardNegative _t_21 _t_73))
(define-fun _t_75 () (_ SFXP 32 16) (sfxp.add Wrapping _t_70 _t_74))
(define-fun _t_77 () (_ SFXP 32 16) (sfxp #x00000872 16))
(define-fun _t_78 () (_ SFXP 32 16) (sfxp.mul Wrapping roundTowardNegative _t_25 _t_77))
(define-fun _t_79 () (_ SFXP 32 16) (sfxp.add Wrapping _t_75 _t_78))
(define-fun _t_82 () (_ SFXP 32 16) (sfxp #x00003be7 16))
(define-fun _t_83 () (_ SFXP 32 16) (sfxp.mul Wrapping roundTowardNegative _t_29 _t_82))
(define-fun _t_84 () (_ SFXP 32 16) (sfxp.add Wrapping _t_79 _t_83))
(define-fun _t_85 () Bool (sfxp.leq _t_84 _t_61))
(assert _t_85)
(define-fun _t_88 () (_ SFXP 32 16) (sfxp #x00008ed9 16))
(define-fun _t_90 () (_ SFXP 32 16) (sfxp #x0000ddb2 16))
(define-fun _t_91 () (_ SFXP 32 16) (sfxp.mul Wrapping roundTowardNegative _t_13 _t_90))
(define-fun _t_92 () (_ SFXP 32 16) (sfxp.add Wrapping _t_34 _t_91))
(define-fun _t_94 () (_ SFXP 32 16) (sfxp #x0000624d 16))
(define-fun _t_95 () (_ SFXP 32 16) (sfxp.mul Wrapping roundTowardNegative _t_17 _t_94))
(define-fun _t_96 () (_ SFXP 32 16) (sfxp.add Wrapping _t_92 _t_95))
(define-fun _t_98 () (_ SFXP 32 16) (sfxp #x0000ae14 16))
(define-fun _t_99 () (_ SFXP 32 16) (sfxp.mul Wrapping roundTowardNegative _t_21 _t_98))
(define-fun _t_100 () (_ SFXP 32 16) (sfxp.add Wrapping _t_96 _t_99))
(define-fun _t_103 () (_ SFXP 32 16) (sfxp #x0000ebc6 16))
(define-fun _t_104 () (_ SFXP 32 16) (sfxp.mul Wrapping roundTowardNegative _t_25 _t_103))
(define-fun _t_105 () (_ SFXP 32 16) (sfxp.add Wrapping _t_100 _t_104))
(define-fun _t_108 () (_ SFXP 32 16) (sfxp #x00006b85 16))
(define-fun _t_109 () (_ SFXP 32 16) (sfxp.mul Wrapping roundTowardNegative _t_29 _t_108))
(define-fun _t_110 () (_ SFXP 32 16) (sfxp.add Wrapping _t_105 _t_109))
(define-fun _t_111 () Bool (sfxp.leq _t_88 _t_110))
(assert _t_111)
(define-fun _t_113 () (_ SFXP 32 16) (sfxp #x0000fd70 16))
(define-fun _t_116 () (_ SFXP 32 16) (sfxp #x0000cccc 16))
(define-fun _t_117 () (_ SFXP 32 16) (sfxp.mul Wrapping roundTowardNegative _t_13 _t_116))
(define-fun _t_118 () (_ SFXP 32 16) (sfxp.add Wrapping _t_34 _t_117))
(define-fun _t_121 () (_ SFXP 32 16) (sfxp #x0000353f 16))
(define-fun _t_122 () (_ SFXP 32 16) (sfxp.mul Wrapping roundTowardNegative _t_17 _t_121))
(define-fun _t_123 () (_ SFXP 32 16) (sfxp.add Wrapping _t_118 _t_122))
(define-fun _t_126 () (_ SFXP 32 16) (sfxp #x000092b0 16))
(define-fun _t_127 () (_ SFXP 32 16) (sfxp.mul Wrapping roundTowardNegative _t_21 _t_126))
(define-fun _t_128 () (_ SFXP 32 16) (sfxp.add Wrapping _t_123 _t_127))
(define-fun _t_130 () (_ SFXP 32 16) (sfxp #x0000d374 16))
(define-fun _t_131 () (_ SFXP 32 16) (sfxp.mul Wrapping roundTowardNegative _t_25 _t_130))
(define-fun _t_132 () (_ SFXP 32 16) (sfxp.add Wrapping _t_128 _t_131))
(define-fun _t_135 () (_ SFXP 32 16) (sfxp #x0000b8d4 16))
(define-fun _t_136 () (_ SFXP 32 16) (sfxp.mul Wrapping roundTowardNegative _t_29 _t_135))
(define-fun _t_137 () (_ SFXP 32 16) (sfxp.add Wrapping _t_132 _t_136))
(define-fun _t_138 () Bool (sfxp.leq _t_137 _t_113))
(assert _t_138)
(define-fun _t_139 () (_ SFXP 32 16) (sfxp #x00008ed9 16))
(define-fun _t_141 () (_ SFXP 32 16) (sfxp #x000027ef 16))
(define-fun _t_144 () (_ SFXP 32 16) (sfxp #x0000051e 16))
(define-fun _t_145 () (_ SFXP 32 16) (sfxp.mul Wrapping roundTowardNegative _t_13 _t_144))
(define-fun _t_146 () (_ SFXP 32 16) (sfxp.add Wrapping _t_34 _t_145))
(define-fun _t_149 () (_ SFXP 32 16) (sfxp #x00006147 16))
(define-fun _t_150 () (_ SFXP 32 16) (sfxp.mul Wrapping roundTowardNegative _t_17 _t_149))
(define-fun _t_151 () (_ SFXP 32 16) (sfxp.add Wrapping _t_146 _t_150))
(define-fun _t_154 () (_ SFXP 32 16) (sfxp #x0000aa7e 16))
(define-fun _t_155 () (_ SFXP 32 16) (sfxp.mul Wrapping roundTowardNegative _t_21 _t_154))
(define-fun _t_156 () (_ SFXP 32 16) (sfxp.add Wrapping _t_151 _t_155))
(define-fun _t_157 () (_ SFXP 32 16) (sfxp.mul Wrapping roundTowardNegative _t_25 _t_139))
(define-fun _t_158 () (_ SFXP 32 16) (sfxp.add Wrapping _t_156 _t_157))
(define-fun _t_161 () (_ SFXP 32 16) (sfxp #x0000b604 16))
(define-fun _t_162 () (_ SFXP 32 16) (sfxp.mul Wrapping roundTowardNegative _t_29 _t_161))
(define-fun _t_163 () (_ SFXP 32 16) (sfxp.add Wrapping _t_158 _t_162))
(define-fun _t_164 () Bool (sfxp.leq _t_163 _t_141))
(assert _t_164)
(check-sat)
(exit)
